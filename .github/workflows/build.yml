name: Flutter APK CI

on:
  push:
    paths-ignore:
      - "**/*.md"
      - ".github/workflows/lock.yml"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.35.2"
          cache: true

      # -------------------------
      #   GRADLE / WRAPPER CACHE
      # -------------------------
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties','android/build.gradle','android/app/build.gradle','pubspec.lock') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # (Ha van saját Android SDK cache-t is szeretnél, ide tehető még egy cache blokk $ANDROID_HOME alá,
      # de a Gradle cache önmagában is jelentősen gyorsítja a buildet.)

      # -------------------------
      #   PUB FÜGGŐSÉGEK
      # -------------------------
      - name: Git cleanup for pub git deps (strong)
        run: |
          set -e
          git config --global --unset-all "http.https://github.com.extraheader" || true
          git config --global --unset-all "http.https://github.com.insteadof" || true

      - name: Resolve packages
        run: flutter pub get

      # (opcionális) Debug aláírás „release” buildnél – ha kell neked
      # - name: Force debug signing for release (dev only)
      #   run: bash ci/force_debug_release.sh

      - name: Resolve packages (again)
        run: flutter pub get

      # -------------------------
      #   IKON / SPLASH (ha van)
      # -------------------------
      - name: Generate launcher icons if asset present
        shell: bash
        run: |
          if [ -f assets/icon/icon.png ]; then
            flutter pub run flutter_launcher_icons:main -f flutter_launcher_icons-android.yaml
          else
            echo "assets/icon/icon.png not found, skipping launcher icon generation."
          fi

      - name: Generate native splash (if configured)
        shell: bash
        run: |
          if grep -Eq "^ *flutter_native_splash *:" pubspec.yaml; then
            flutter pub run flutter_native_splash:create
          else
            echo "No flutter_native_splash config in pubspec.yaml, skipping splash."
          fi

      # -------------------------
      #   (opcionális) V1 ellenőrzések – ha továbbra is kéred
      # -------------------------
      - name: Fix legacy V1 ApplicationName in source manifests
        shell: bash
        run: |
          set -e
          fixed=0
          while IFS= read -r -d '' mf; do
            if grep -q 'android:name=' "$mf"; then
              sed -i 's/\s*android:name="[^"]*"\s*//' "$mf"
              fixed=$((fixed+1))
            fi
            if grep -q 'flutterEmbedding"' "$mf"; then
              sed -i 's#</application>#  <meta-data android:name="flutterEmbedding" android:value="2" />\n  </application>#' "$mf"
            fi
          done < <(find android/app/src -type f -name AndroidManifest.xml -print0)
          echo "Fixed files: $fixed"

      - name: Pre-merge manifest (debug) and dump it
        shell: bash
        run: |
          set -e
          cd android
          ./gradlew :app:processDebugMainManifest --no-daemon --stacktrace --warning-mode all
          MF="app/build/intermediates/merged_manifests/debug/AndroidManifest.xml"
          echo "---- merged manifest path: $MF"
          head -n 60 "$MF" || true
          cd ..

      # -------------------------
      #   APK BUILD
      # -------------------------
      - name: Build DEBUG APK (dev-friendly signing)
        run: |
          flutter build apk --debug \
            --build-number="${GITHUB_RUN_NUMBER}" \
            --build-name="$(date +'%Y.%m.%d').${GITHUB_RUN_NUMBER}"

      # (opcionális) ellenőrzés, hogy a merged manifest V2-only
      - name: Verify merged manifest is V2-only
        shell: bash
        run: |
          set -e
          MERGED="build/app/intermediates/merged_manifests/debug/AndroidManifest.xml"
          if [ ! -f "$MERGED" ]; then
            MERGED="android/app/build/intermediates/merged_manifests/debug/AndroidManifest.xml"
          fi
          if [ ! -f "$MERGED" ]; then
            echo "Merged manifest not found"
            exit 1
          fi
          if grep -E 'applicationName|FlutterApplication|io\.flutter\.app|GeneratedPluginRegistrant' "$MERGED"; then
            echo "Merged manifest still contains V1-related entries."
            exit 1
          fi
          echo "Merged manifest is clean (V2-only)."

      - name: Upload debug APK
        uses: actions/upload-artifact@v4
        with:
          name: apk-debug
          path: build/app/outputs/flutter-apk/app-debug.apk
