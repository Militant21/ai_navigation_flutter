name: Flutter APK CI
on:
  push:
    paths-ignore:
      - "**/*.md"
      - ".github/workflows/lock.yml"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      # ---- Gyors cache Gradle-nek
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # ---- Gyors gradle.properties (daemon, cache, párhuzamosítás)
      - name: Ensure fast Gradle props
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p android
          gp=android/gradle.properties
          grep -q '^org.gradle.daemon='      "$gp" 2>/dev/null || echo 'org.gradle.daemon=true'            >> "$gp"
          grep -q '^org.gradle.caching='     "$gp" 2>/dev/null || echo 'org.gradle.caching=true'           >> "$gp"
          grep -q '^org.gradle.parallel='    "$gp" 2>/dev/null || echo 'org.gradle.parallel=true'          >> "$gp"
          grep -q '^org.gradle.configureondemand=' "$gp" 2>/dev/null || echo 'org.gradle.configureondemand=true' >> "$gp"
          grep -q '^kotlin.incremental='     "$gp" 2>/dev/null || echo 'kotlin.incremental=true'           >> "$gp"

      # ---- Android v2 embedding + projekt váz (ha hiányzik)
      - name: Ensure Android folder (safe, v2)
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -d android/app/src/main ]; then
            flutter create --platforms=android --no-pub .
          fi

      - name: Flutter pub get (fast)
        run: flutter pub get --no-example

      # ---- Ikon/splash csak ha van yaml és asset (gyors, feltételes)
      - name: Generate launcher icons (Android only)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f flutter_launcher_icons-android.yaml ] && [ -f assets/icon/icon.png ]; then
            flutter pub run flutter_launcher_icons:main -f flutter_launcher_icons-android.yaml
          else
            echo "skip icons"
          fi

      - name: Generate native splash (Android)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f flutter_native_splash.yaml ] || [ -f flutter_native_splash.yml ]; then
            CFG=$( [ -f flutter_native_splash.yaml ] && echo flutter_native_splash.yaml || echo flutter_native_splash.yml )
            flutter pub run flutter_native_splash:create --path="$CFG"
          else
            echo "skip splash"
          fi

      # ---- Gyors DEBUG build (icon-tree-shake kikapcs a sebességért)
      - name: Build DEBUG APK (fast)
        run: flutter build apk --debug --no-tree-shake-icons

      - uses: actions/upload-artifact@v4
        with:
          name: apk-debug
          path: build/app/outputs/flutter-apk/app-debug.apk
